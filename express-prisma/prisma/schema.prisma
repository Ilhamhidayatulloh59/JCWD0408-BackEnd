// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Status {
  pending
  paid
  cancel
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password      String
  avatar        String?
  isVerify      Boolean       @default(false)
  role          Role          @default(user)
  login_attempt Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Tweet         Tweet[]
  LikeTweet     LikeTweet[]
  Transaction   Transaction[]
}

model Tweet {
  id        Int         @id @default(autoincrement())
  content   String      @db.VarChar(280)
  media     String?
  likes     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  LikeTweet LikeTweet[]
}

model LikeTweet {
  userId  Int
  tweetId Int
  user    User  @relation(fields: [userId], references: [id])
  tweet   Tweet @relation(fields: [tweetId], references: [id])

  @@id([userId, tweetId])
}

model Transaction {
  id          String   @id @default(uuid())
  price       Float
  status      Status   @default(pending)
  paymentLink String
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
